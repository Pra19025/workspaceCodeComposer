// Según el pinout debe usarse I2CB

#include "driverlib.h"
#include "I2C_Lib.h"
#include "device.h"

struct I2CMsg i2cMsgOut = { MSG_STATUS_SEND_WITHSTOP, 0x04, 5, 'H', 'o', 'l',
                            'a', 13 };
//se probo que se pueden mandar las unidades de un buffer

struct I2CMsg i2cMsgIn = { MSG_STATUS_SEND_NOSTOP, 0x04, 8 };

//struct I2CMsg i2cMsgOut2 = { 0x28, 1, '5' };
//se probo cambiar de esclavo.

void main(void)
{
    uint16_t i;
    Device_init();
    Device_initGPIO();
    i2c_init();

    while (!SysCtl_setClock(
    SYSCTL_PLL_ENABLE | SYSCTL_SYSDIV(1) | SYSCTL_IMULT(5) | SYSCTL_OSCSRC_XTAL))
    {
        SysCtl_resetMCD();
    }

    SysCtl_enablePeripheral(SYSCTL_PERIPH_CLK_I2CB);

    GPIO_setPinConfig(GPIO_34_I2CB_SDA);
    GPIO_setPadConfig(34, GPIO_PIN_TYPE_PULLUP);
    GPIO_setQualificationMode(34, GPIO_QUAL_ASYNC); //que no sea síncrono

    GPIO_setPinConfig(GPIO_15_I2CB_SCL);
    GPIO_setPadConfig(15, GPIO_PIN_TYPE_PULLUP);
    GPIO_setQualificationMode(15, GPIO_QUAL_ASYNC);

    // para el blink de prueba
    GPIO_setPadConfig(DEVICE_GPIO_PIN_LED1, GPIO_PIN_TYPE_STD);
    GPIO_setDirectionMode(DEVICE_GPIO_PIN_LED1, GPIO_DIR_MODE_OUT);

    for (i = 0; i < 20; i++)
    {
        i2cMsgIn.msgBuffer[i] = 0x0000;
    }

    while (1)
    {
        DEVICE_DELAY_US(1000);
        writeData(&i2cMsgOut);
        DEVICE_DELAY_US(100000);

        readData(&i2cMsgIn);

        if (i2cMsgIn.msgBuffer == 0x22)
        {

            GPIO_writePin(DEVICE_GPIO_PIN_LED1, 0);
            // Delay for a bit.
            DEVICE_DELAY_US(100000);

            // Turn off LED
            GPIO_writePin(DEVICE_GPIO_PIN_LED1, 1);

            // Delay for a bit.
            DEVICE_DELAY_US(100000);

        }

        //i2cMsgOut2.slaveAddr = 0x04;    // asi puedo modificar los valores de la estructura

        //El siguiente paso es mandar algo similar al formato de las direcciones

    }
}

