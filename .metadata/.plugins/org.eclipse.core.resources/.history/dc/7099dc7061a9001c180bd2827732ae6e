/*
 * I2C_Lib.c
 *
 *  Created on: 16/03/2022
 *      Author: Noel Prado
 */

#include "I2C_Lib.h"



void i2c_init(void){
    //inicializa el modulo i2c
    I2C_disableModule(I2CB_BASE);

    I2C_setConfig(I2CB_BASE, I2C_MASTER_SEND_MODE);
    I2C_setAddressMode(I2CB_BASE, I2C_ADDR_MODE_7BITS);
    I2C_initMaster(I2CB_BASE, SysCtl_getClock(20000000), 100000, I2C_DUTYCYCLE_50);
    I2C_setEmulationMode(I2CB_BASE, I2C_EMULATION_FREE_RUN);


    I2C_enableInterrupt(I2CB_BASE, I2C_INT_STOP_CONDITION |
                                       I2C_INT_REG_ACCESS_RDY);

    I2C_enableFIFO(I2CB_BASE);
    I2C_clearInterruptStatus(I2CB_BASE, I2C_INT_RXFF | I2C_INT_TXFF);
    I2C_enableModule(I2CB_BASE);
}


uint16_t writeData(struct I2CMsg *msg)
{
    uint16_t i;

    I2C_setSlaveAddress(I2CB_BASE, msg->slaveAddr);

    if (I2C_isBusBusy(I2CB_BASE))
    {
        return (ERROR_BUS_BUSY);

    }

    I2C_setDataCount(I2CB_BASE, (msg->numBytes + 2));

    for (i = 0; i < msg->numBytes; i++)
    {
        I2C_putData(I2CB_BASE, msg->msgBuffer[i]);
    }

    I2C_setConfig(I2CB_BASE, I2C_MASTER_SEND_MODE);
    I2C_sendStartCondition(I2CB_BASE);
    I2C_sendStopCondition(I2CB_BASE);

    while (I2C_getStopConditionStatus(I2CB_BASE));

    return (SUCCESS);

}

